-- Initial Schema for YumYum Premium Tier

-- Functions
-- Function to automatically update modify_time column
CREATE OR REPLACE FUNCTION public.update_modify_time()
RETURNS TRIGGER AS $$
BEGIN
    NEW.modify_time = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Function to get user ID by email for secure server-side checks
CREATE OR REPLACE FUNCTION get_user_id_by_email(user_email TEXT)
RETURNS TABLE (id UUID, email TEXT)
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public;
AS $$
BEGIN
  RETURN QUERY
  SELECT au.id, au.email
  FROM auth.users au
  WHERE au.email = user_email;
END;
$$;


-- ENUM Types
CREATE TYPE instock_status AS ENUM ('yes', 'no', 'hide');
CREATE TYPE dietary_info AS ENUM ('veg', 'non-veg');
CREATE TYPE status_type AS ENUM ('image', 'video', 'text');

-- ##################################################
-- ### SCHEMA FOR THE PRIMARY SUPABASE PROJECT ###
-- ##################################################

-- Table for vendor mappings and membership data
CREATE TABLE public.vendor_mappings (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    vendor_slug text NOT NULL UNIQUE,
    auth_user_id uuid REFERENCES auth.users(id) ON DELETE SET NULL,
    datastore_type text NOT NULL,
    datastore_id text NOT NULL,
    imagekit_account_id text NOT NULL,
    is_member boolean DEFAULT true NOT NULL,
    membership_fee real DEFAULT 0,
    membership_validity date DEFAULT (now() + '10 days'::interval),
    create_time timestamp with time zone DEFAULT now() NOT NULL,
    modify_time timestamp with time zone DEFAULT now() NOT NULL
);

-- Trigger to update modify_time on changes to vendor_mappings
CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public.vendor_mappings
  FOR EACH ROW EXECUTE PROCEDURE public.update_modify_time();

-- Table for tracking vendor payments
CREATE TABLE public.vendor_payment (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    vendor_id bigint NOT NULL REFERENCES public.vendor_mappings(id) ON DELETE CASCADE,
    payment real NOT NULL,
    payment_date date NOT NULL,
    payment_duration interval NOT NULL,
    create_time timestamp with time zone DEFAULT now() NOT NULL,
    modify_time timestamp with time zone DEFAULT now() NOT NULL
);

-- Trigger to update modify_time on changes to vendor_payment
CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public.vendor_payment
  FOR EACH ROW EXECUTE PROCEDURE public.update_modify_time();


-- #####################################################
-- ### SCHEMA FOR EACH VENDOR-SPECIFIC PROJECT ###
-- #####################################################

-- Table for vendor brand profiles
CREATE TABLE public.brand (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  auth_user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  name text NOT NULL,
  logo_url text,
  cuisine text,
  address text,
  city text,
  description text,
  payment_link text,
  whatsapp text,
  contact text,
  location_link text,
  review_link text,
  instagram text,
  facebook text,
  youtube text,
  custom text,
  full_menu_pic text,
  create_time timestamp with time zone DEFAULT now() NOT NULL,
  modify_time timestamp with time zone DEFAULT now() NOT NULL
);

-- Trigger to update modify_time on changes to brand
CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public.brand
  FOR EACH ROW EXECUTE PROCEDURE public.update_modify_time();

-- Table for individual menu items (dishes)
CREATE TABLE public.dishes (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  brand_id bigint NOT NULL REFERENCES public.brand(id) ON DELETE CASCADE,
  category text NOT NULL,
  name text NOT NULL,
  image text,
  reel text,
  description text,
  price real,
  instock instock_status DEFAULT 'yes',
  veg dietary_info,
  tag text,
  create_time timestamp with time zone DEFAULT now() NOT NULL,
  modify_time timestamp with time zone DEFAULT now() NOT NULL
);

-- Trigger to update modify_time on changes to dishes
CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public.dishes
  FOR EACH ROW EXECUTE PROCEDURE public.update_modify_time();

-- Table for daily status updates from vendors
CREATE TABLE public.status_item (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  brand_id bigint NOT NULL REFERENCES public.brand(id) ON DELETE CASCADE,
  type status_type NOT NULL,
  content text NOT NULL,
  imagekit_file_id text,
  create_time timestamp with time zone DEFAULT now() NOT NULL
);


-- ##################################################
-- ### ROW LEVEL SECURITY (RLS) POLICIES ###
-- ##################################################

-- RLS for public.vendor_mappings (Primary DB)
ALTER TABLE public.vendor_mappings ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Vendors can view their own mappings."
ON public.vendor_mappings FOR SELECT
USING (auth.uid() = auth_user_id);
CREATE POLICY "Vendors can update their own mappings."
ON public.vendor_mappings FOR UPDATE
USING (auth.uid() = auth_user_id);
CREATE POLICY "Admins can manage all mappings."
ON public.vendor_mappings FOR ALL
USING (true); -- Placeholder for admin role check, assumes full admin access for now

-- RLS for public.vendor_payment (Primary DB)
ALTER TABLE public.vendor_payment ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Admins can manage payments."
ON public.vendor_payment FOR ALL
USING (true); -- Placeholder for admin role check, assumes full admin access for now


-- RLS for public.brand (Vendor DB)
ALTER TABLE public.brand ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Vendors can manage their own brand"
ON public.brand FOR ALL
USING (auth.uid() = auth_user_id);

-- RLS for public.dishes (Vendor DB)
ALTER TABLE public.dishes ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Vendors can manage their own dishes"
ON public.dishes FOR ALL
USING (
  (EXISTS ( SELECT 1
   FROM public.brand
  WHERE ((public.brand.id = dishes.brand_id) AND (public.brand.auth_user_id = auth.uid()))))
);

-- RLS for public.status_item (Vendor DB)
ALTER TABLE public.status_item ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Vendors can manage their own status items"
ON public.status_item FOR ALL
USING (
  (EXISTS ( SELECT 1
   FROM public.brand
  WHERE ((public.brand.id = status_item.brand_id) AND (public.brand.auth_user_id = auth.uid()))))
);
