-- Create ENUM types first
CREATE TYPE instock_status AS ENUM ('yes', 'no', 'hide');
CREATE TYPE dietary_info AS ENUM ('veg', 'non-veg');
CREATE TYPE status_type AS ENUM ('image', 'video', 'text');

-- Stores the vendor's brand profile information.
CREATE TABLE public.brand (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  vendor_id uuid NOT NULL REFERENCES auth.users(id),
  name text NOT NULL,
  logo_url text,
  cuisine text,
  description text,
  payment_link text,
  whatsapp text,
  contact text,
  location_link text,
  review_link text,
  instagram text,
  facebook text,
  youtube text,
  custom text,
  full_menu_pic text,
  created_at timestamp with time zone NOT NULL DEFAULT now()
);

-- Stores the individual menu items for a vendor.
CREATE TABLE public.dishes (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  vendor_id uuid NOT NULL REFERENCES auth.users(id),
  category text NOT NULL,
  name text NOT NULL,
  description text,
  price real,
  instock instock_status DEFAULT 'yes', -- Use ENUM type
  veg dietary_info, -- Use ENUM type
  tag text,
  image text,
  reel text,
  created_at timestamp with time zone NOT NULL DEFAULT now()
);

-- Stores daily status updates from the vendor.
CREATE TABLE public.status (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  vendor_id uuid NOT NULL REFERENCES auth.users(id),
  content text NOT NULL,
  type status_type NOT NULL, -- Use ENUM type
  created_at timestamp with time zone NOT NULL DEFAULT now()
);

-- RLS for brand table
ALTER TABLE public.brand ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Vendors can view their own brand"
ON public.brand FOR SELECT
USING (auth.uid() = vendor_id);

CREATE POLICY "Vendors can insert their own brand"
ON public.brand FOR INSERT
WITH CHECK (auth.uid() = vendor_id);

CREATE POLICY "Vendors can update their own brand"
ON public.brand FOR UPDATE
USING (auth.uid() = vendor_id);

CREATE POLICY "Vendors can delete their own brand"
ON public.brand FOR DELETE
USING (auth.uid() = vendor_id);

-- RLS for dishes table
ALTER TABLE public.dishes ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Vendors can view their own dishes"
ON public.dishes FOR SELECT
USING (auth.uid() = vendor_id);

CREATE POLICY "Vendors can insert their own dishes"
ON public.dishes FOR INSERT
WITH CHECK (auth.uid() = vendor_id);

CREATE POLICY "Vendors can update their own dishes"
ON public.dishes FOR UPDATE
USING (auth.uid() = vendor_id);

CREATE POLICY "Vendors can delete their own dishes"
ON public.dishes FOR DELETE
USING (auth.uid() = vendor_id);

-- RLS for status table
ALTER TABLE public.status ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Vendors can view their own status"
ON public.status FOR SELECT
USING (auth.uid() = vendor_id);

CREATE POLICY "Vendors can insert their own status"
ON public.status FOR INSERT
WITH CHECK (auth.uid() = vendor_id);

CREATE POLICY "Vendors can update their own status"
ON public.status FOR UPDATE
USING (auth.uid() = vendor_id);

CREATE POLICY "Vendors can delete their own status"
ON public.status FOR DELETE
USING (auth.uid() = vendor_id);